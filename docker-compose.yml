services:
  db:
    image: postgres:17.5
    container_name: gameslib-db
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    container_name: db-migrations
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  auth_service:
    build:
      context: .
      dockerfile: apps/auth_service/Dockerfile
    container_name: auth_service
    restart: unless-stopped
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
      SECRET_KEY: "${SECRET_KEY:-change-this-secret}"
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

  game_service:
    build:
      context: .
      dockerfile: apps/game_service/Dockerfile
    container_name: game_service
    restart: unless-stopped
    ports:
      - "8002:8000"
    depends_on:
      db:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      GAME_SERVICE_DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"

  frontend:
    build:
      context: ./apps/frontend
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    depends_on:
      auth_service:
        condition: service_started
      game_service:
        condition: service_started
volumes:
  db_data:
